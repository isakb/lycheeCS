// Generated by CoffeeScript 1.6.3
(function() {
  lychee.define("lychee.ui.Renderer").requires(["lychee.ui.Button", "lychee.ui.Text", "lychee.ui.Tile"]).includes(["lychee.Renderer"]).exports(function(lychee, global) {
    return lychee.ui.Renderer = (function() {
      function Renderer(id) {
        lychee.Renderer.call(this, id);
      }

      Renderer.prototype.renderUIEntity = function(entity, offsetX, offsetY) {
        if (entity instanceof lychee.ui.Button) {
          return this.renderUIButton(entity, offsetX, offsetY);
        } else if (entity instanceof lychee.ui.Sprite) {
          return this.renderUISprite(entity, offsetX, offsetY);
        } else if (entity instanceof lychee.ui.Text) {
          return this.renderUIText(entity, offsetX, offsetY);
        } else {
          if (entity instanceof lychee.ui.Tile) {
            return this.renderUITile(entity, offsetX, offsetY);
          }
        }
      };

      Renderer.prototype.renderUIButton = function(entity, offsetX, offsetY) {
        var background, label, pos;
        offsetX = offsetX || 0;
        offsetY = offsetY || 0;
        pos = entity.getPosition();
        background = entity.getBackground();
        if (background !== null) {
          this.renderUISprite(background, pos.x + offsetX, pos.y + offsetY);
        }
        label = entity.getLabel();
        if (label !== null) {
          return this.renderUIText(label, pos.x + offsetX, pos.y + offsetY);
        }
      };

      Renderer.prototype.renderUISprite = function(entity, offsetX, offsetY) {
        var image, map, pos;
        offsetX = offsetX || 0;
        offsetY = offsetY || 0;
        map = entity.getMap();
        pos = entity.getPosition();
        image = entity.getImage();
        return this.drawSprite(pos.x + offsetX - entity.width / 2, pos.y + offsetY - entity.height / 2, image, map);
      };

      Renderer.prototype.renderUIText = function(entity, offsetX, offsetY) {
        var pos;
        offsetX = offsetX || 0;
        offsetY = offsetY || 0;
        pos = entity.getPosition();
        return this.drawText(pos.x + offsetX - entity.width / 2, pos.y + offsetY - entity.height / 2, entity.text, entity.font);
      };

      Renderer.prototype.renderUITile = function(entity, offsetX, offsetY) {
        var pos;
        if (entity.color === null) {
          return;
        }
        offsetX = offsetX || 0;
        offsetY = offsetY || 0;
        pos = entity.getPosition();
        return this.drawBox(pos.x + offsetX - entity.width / 2, pos.y + offsetY - entity.height / 2, pos.x + offsetX + entity.width / 2, pos.y + offsetY + entity.height / 2, entity.color, true);
      };

      return Renderer;

    })();
  });

}).call(this);
