// Generated by CoffeeScript 1.4.0
(function() {

  lychee.define("lychee.ui.Entity").includes(["lychee.game.Entity"]).exports(function(lychee, global) {
    return lychee.ui.Entity = (function() {

      function Entity(data) {
        var settings;
        settings = lychee.extend({}, data);
        this._layout = null;
        this._value = null;
        this._events = {};
        if (settings.layout) {
          this.setLayout(settings.layout);
          delete settings.layout;
        }
        lychee.game.Entity.call(this, settings);
        settings = null;
      }

      Entity.prototype.hasEvent = function(type) {
        if (this._events[type] === void 0) {
          return false;
        }
        if (this._events[type].length === 0) {
          return false;
        }
        return true;
      };

      Entity.prototype.bind = function(type, callback, scope) {
        if (this._events[type] === void 0) {
          this._events[type] = [];
        }
        return this._events[type].push({
          callback: callback,
          scope: scope || global
        });
      };

      Entity.prototype.unbind = function(type, callback, scope) {
        var entry, found, i, l;
        callback = (callback instanceof Function ? callback : null);
        scope = (scope !== void 0 ? scope : null);
        if (this._events[type] === void 0) {
          return true;
        }
        found = false;
        i = 0;
        l = this._events[type].length;
        while (i < l) {
          entry = this._events[type][i];
          if ((callback === null || entry.callback === callback) && (scope === null || entry.scope === scope)) {
            found = true;
            this._events[type].splice(i, 1);
            l--;
          }
          i++;
        }
        return found;
      };

      Entity.prototype.trigger = function(type, data) {
        var entry, i, l, passData, success;
        passData = data;
        if (data === void 0 || Object.prototype.toString.call(data) !== "[object Array]") {
          passData = [this, this._value];
        }
        success = false;
        if (this._events[type] !== void 0) {
          i = 0;
          l = this._events[type].length;
          while (i < l) {
            entry = this._events[type][i];
            entry.callback.apply(entry.scope, passData);
            i++;
          }
          success = true;
        }
        return success;
      };

      Entity.prototype.relayout = function(parent) {
        var cache, hheight, hwidth, layout;
        cache = this._cache.position;
        hwidth = parent.width / 2;
        hheight = parent.height / 2;
        layout = this._layout;
        if (layout !== null) {
          if (layout.position === "relative") {
            if (layout.x >= -1 && layout.x <= 1) {
              cache.x = layout.x * hwidth;
            }
            if (layout.y >= -1 && layout.y <= 1) {
              cache.y = layout.y * hheight;
            }
          } else if (layout.position === "absolute") {
            if (layout.x >= -hwidth && layout.x <= hwidth) {
              cache.x = layout.x;
            }
            if (layout.y >= -hheight && layout.y <= hheight) {
              cache.y = layout.y;
            }
          }
          return this.setPosition(cache);
        }
      };

      Entity.prototype.getValue = function() {
        return this._value;
      };

      Entity.prototype.setValue = function(value) {
        return this._value = value;
      };

      Entity.prototype.getLabel = function() {
        return null;
      };

      Entity.prototype.getLayout = function() {
        return this._layout;
      };

      Entity.prototype.setLayout = function(layout) {
        if (this._layout === null) {
          this._layout = {
            position: "absolute",
            x: 0,
            y: 0
          };
        }
        if (Object.prototype.toString.call(layout) !== "[object Object]") {
          return false;
        }
        this._layout.position = (typeof layout.position === "string" ? layout.position : this._layout.position);
        this._layout.x = (typeof layout.x === "number" ? layout.x : this._layout.x);
        this._layout.y = (typeof layout.y === "number" ? layout.y : this._layout.y);
        return true;
      };

      return Entity;

    })();
  });

}).call(this);
