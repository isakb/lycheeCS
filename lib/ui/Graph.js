// Generated by CoffeeScript 1.4.0
(function() {

  lychee.define("lychee.ui.Graph").includes(["lychee.game.Graph"]).exports(function(lychee, global) {
    return lychee.ui.Graph = (function() {

      function Graph(renderer) {
        this._renderer = (renderer !== void 0 ? renderer : null);
        this._clock = null;
        this._offset = {
          x: 0,
          y: 0,
          z: 0
        };
        this._tween = null;
        this._cache = {
          tween: {}
        };
        lychee.game.Graph.call(this);
      }

      Graph.prototype.relayout = function() {
        return this._dirty = true;
      };

      Graph.prototype.update = function(clock, delta) {
        var cache, t;
        this._clock = clock;
        if (this._tween !== null && (clock <= this._tween.start + this._tween.duration)) {
          cache = this._cache.tween;
          t = (clock - this._tween.start) / this._tween.duration;
          cache.x = this._tween.from.x + t * (this._tween.to.x - this._tween.from.x);
          cache.y = this._tween.from.y + t * (this._tween.to.y - this._tween.from.y);
          this.setOffset(cache);
        } else if (this._tween !== null) {
          this.setOffset(this._tween.to);
          if (this._tween.callback !== null) {
            this._tween.callback.call(this._tween.scope);
          }
          this._tween = null;
        }
        if (this._dirty === true) {
          this._relayoutNode(this._tree, null);
          this._dirty = false;
        }
        return this._updateNode(this._tree, clock, delta);
      };

      Graph.prototype.render = function(clock, delta) {
        if (this._renderer !== null) {
          return this._renderNode(this._tree, this._offset.x, this._offset.y);
        }
      };

      Graph.prototype.getEntityByPosition = function(x, y, z, convert) {
        convert = (convert === true ? true : false);
        if (convert === true) {
          if (x !== null) {
            x -= this._offset.x;
          }
          if (y !== null) {
            y -= this._offset.y;
          }
          if (z !== null) {
            z -= this._offset.z;
          }
        }
        return lychee.game.Graph.prototype.getEntityByPosition.call(this, x, y, z);
      };

      Graph.prototype.setTween = function(duration, position, callback, scope) {
        var tween;
        duration = (typeof duration === "number" ? duration : 0);
        callback = (callback instanceof Function ? callback : null);
        scope = (scope !== void 0 ? scope : global);
        tween = null;
        if (Object.prototype.toString.call(position) === "[object Object]") {
          position.x = (typeof position.x === "number" ? position.x : this._offset.x);
          position.y = (typeof position.y === "number" ? position.y : this._offset.y);
          tween = {
            start: this._clock,
            duration: duration,
            from: {
              x: this._offset.x,
              y: this._offset.y
            },
            to: position,
            callback: callback,
            scope: scope
          };
        }
        return this._tween = tween;
      };

      Graph.prototype.getOffset = function() {
        return this._offset;
      };

      Graph.prototype.setOffset = function(offset) {
        if (Object.prototype.toString.call(offset) !== "[object Object]") {
          return false;
        }
        this._offset.x = (typeof offset.x === "number" ? offset.x : this._offset.x);
        this._offset.y = (typeof offset.y === "number" ? offset.y : this._offset.y);
        this._offset.z = (typeof offset.z === "number" ? offset.z : this._offset.z);
        return true;
      };

      Graph.prototype._relayoutNode = function(node, parent) {
        var c, l, _results;
        if (parent !== null && parent.entity !== null && node.entity !== null && typeof node.entity.relayout === "function") {
          node.entity.relayout(parent.entity);
        }
        c = 0;
        l = node.children.length;
        _results = [];
        while (c < l) {
          this._relayoutNode(node.children[c], node);
          _results.push(c++);
        }
        return _results;
      };

      Graph.prototype._renderNode = function(node, offsetX, offsetY) {
        var c, l, _results;
        if (node.entity !== null) {
          this._renderer.renderUIEntity(node.entity, offsetX, offsetY);
          offsetX += node.entity.getPosition().x;
          offsetY += node.entity.getPosition().y;
        }
        c = 0;
        l = node.children.length;
        _results = [];
        while (c < l) {
          this._renderNode(node.children[c], offsetX, offsetY);
          _results.push(c++);
        }
        return _results;
      };

      return Graph;

    })();
  });

}).call(this);
