// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  if (typeof global !== "undefined") {
    global.lychee = {};
  } else {
    this.lychee = {};
  }

  (function(lychee, global) {
    var _bases, _tags, _tree;
    _tree = {};
    _tags = {};
    _bases = {
      lychee: "./lychee"
    };
    lychee.define = function(name) {
      var classname, namespace, tmp;
      namespace = null;
      classname = null;
      if (name.match(/\./)) {
        tmp = name.split(".");
        classname = tmp[tmp.length - 1];
        tmp.pop();
        namespace = tmp.join(".");
      } else {
        classname = name;
        namespace = "lychee";
      }
      return new lychee.DefinitionBlock(namespace, classname);
    };
    lychee.extend = function() {
      var obj, obj2, objs, prop, _i, _len;
      obj = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = objs.length; _i < _len; _i++) {
        obj2 = objs[_i];
        if (obj2) {
          for (prop in obj2) {
            obj[prop] = obj2[prop];
          }
        }
      }
      return obj;
    };
    lychee.rebase = function(settings) {
      var namespace;
      settings = (Object.prototype.toString.call(settings) === "[object Object]" ? settings : null);
      if (settings !== null) {
        for (namespace in settings) {
          _bases[namespace] = settings[namespace];
        }
      }
      return lychee;
    };
    lychee.tag = function(settings) {
      var tag, values;
      settings = (Object.prototype.toString.call(settings) === "[object Object]" ? settings : null);
      if (settings !== null) {
        for (tag in settings) {
          values = null;
          if (Object.prototype.toString.call(settings[tag]) === "[object Array]") {
            values = settings[tag];
          } else {
            if (typeof settings[tag] === "string") {
              values = [settings[tag]];
            }
          }
          if (values !== null) {
            _tags[tag] = values;
          }
        }
      }
      return lychee;
    };
    lychee.getEnvironment = function() {
      return {
        tree: _tree,
        tags: _tags,
        bases: _bases
      };
    };
    lychee.build = function(callback, scope) {
      throw "lychee.build: You need to include the lychee.Builder to build the dependency tree.";
    };
    return lychee.DefinitionBlock = (function() {

      function DefinitionBlock(space, name) {
        space = (typeof name === "string" ? space : null);
        name = (typeof name === "string" ? name : space);
        this._space = space;
        this._name = name;
        this._tags = {};
        this._requires = [];
        this._includes = [];
        this._exports = null;
        this._supports = null;
        this;

      }

      DefinitionBlock.prototype._throw = function(message) {
        if (lychee.debug === true) {
          return console.warn("lychee.DefinitionBlock: Use lychee.define('" + this._space + "." + this._id + "')." + message + " instead.", this);
        }
      };

      DefinitionBlock.prototype.tags = function(tags) {
        var name, value;
        if (Object.prototype.toString.call(tags) !== "[object Object]") {
          this._throw("tags({ tag: 'value' })");
          return this;
        }
        for (name in tags) {
          value = tags[name];
          this._tags[name] = value;
        }
        return this;
      };

      DefinitionBlock.prototype.supports = function(supports) {
        if (!supports instanceof Function) {
          this._throw("supports(function() {})");
          return this;
        }
        this._supports = supports;
        return this;
      };

      DefinitionBlock.prototype.requires = function(requires) {
        var id, l, r;
        if (Object.prototype.toString.call(requires) !== "[object Array]") {
          this._throw("requires([ 'array', 'of', 'requirements' ])");
          return this;
        }
        r = 0;
        l = requires.length;
        while (r < l) {
          id = void 0;
          if (requires[r].match(/\./)) {
            id = requires[r];
          } else if (this._space !== null) {
            id = this._space + "." + requires[r];
          } else {
            id = requires[r];
          }
          this._requires.push(id);
          r++;
        }
        return this;
      };

      DefinitionBlock.prototype.includes = function(includes) {
        var i, id, l;
        if (Object.prototype.toString.call(includes) !== "[object Array]") {
          this._throw("includes([ 'array', 'of', 'includes' ])");
          return this;
        }
        i = 0;
        l = includes.length;
        while (i < l) {
          id = void 0;
          if (includes[i].match(/\./)) {
            id = includes[i];
          } else if (this._space !== null) {
            id = this._space + "." + includes[i];
          } else {
            id = includes[i];
          }
          this._includes.push(id);
          i++;
        }
        return this;
      };

      DefinitionBlock.prototype.exports = function(exports) {
        if (!exports instanceof Function) {
          this._throw("exports(function(lychee, global) { })");
          return this;
        }
        this._exports = exports;
        if ((this._supports === null || this._supports.call(global, lychee, global) === true) && !(_tree[this._space + "." + this._name] != null)) {
          return _tree[this._space + "." + this._name] = this;
        }
      };

      return DefinitionBlock;

    })();
  })(lychee, (typeof global !== "undefined" ? global : this));

  (function(global) {
    if (global.console.log === void 0) {
      global.console.log = function() {};
    }
    if (global.console.error === void 0) {
      global.console.error = global.console.log;
    }
    if (global.console.warn === void 0) {
      global.console.warn = global.console.log;
    }
    if (global.console.group === void 0) {
      global.console.group = function(title) {
        return console.log("~ ~ ~ " + title + "~ ~ ~");
      };
    }
    if (global.console.groupEnd === void 0) {
      return global.console.groupEnd = function() {
        return console.log("~ ~ ~ ~ ~ ~");
      };
    }
  })((typeof global !== "undefined" ? global : this));

}).call(this);
