// Generated by CoffeeScript 1.4.0
(function() {

  lychee.define("lychee.physics.ParticleEmitter").requires(["lychee.physics.Particle"]).exports(function(lychee, global) {
    return lychee.physics.ParticleEmitter = (function() {

      function ParticleEmitter(data, graph) {
        var settings;
        settings = lychee.extend({}, this.defaults, data);
        this._graph = null;
        this._particles = [];
        this._position = {
          x: 0,
          y: 0,
          z: 0
        };
        this._cache = {
          position: {
            x: 0,
            y: 0,
            z: 0
          },
          settings: {
            position: {
              x: 0,
              y: 0,
              z: 0
            },
            velocity: {
              x: 0,
              y: 0,
              z: 0
            },
            mass: 1
          }
        };
        this._clock = null;
        this._spawn = null;
        if (graph !== null) {
          this._graph = graph;
        }
        settings.position !== null && this.setPosition(settings.position);
        settings = null;
      }

      ParticleEmitter.SPAWN = {
        linear: {
          interval: 1000,
          amount: 1,
          defaults: {},
          callback: function(spawn, delta, id) {
            return this.spawn(spawn.amount, spawn.settings);
          },
          clear: function(spawn) {}
        }
      };

      ParticleEmitter.prototype.defaults = {
        position: null
      };

      ParticleEmitter.prototype.sync = function(clock, delta) {
        var l, p, _results;
        this._clock = clock;
        p = 0;
        l = this._particles.length;
        _results = [];
        while (p < l) {
          this._particles[p].sync(clock, delta);
          _results.push(p++);
        }
        return _results;
      };

      ParticleEmitter.prototype.update = function(clock, delta) {
        var curStep, data;
        if (this._clock === null) {
          this.sync(clock, delta);
        }
        if (this._spawn !== null && this._graph !== null && this._spawn.amount !== null) {
          data = this._spawn;
          curStep = Math.floor((clock - data.start) / data.delta);
          if (curStep > data.step) {
            data.step = curStep;
            return data.callback.call(data.scope, data, clock - data.start, curStep);
          }
        }
      };

      ParticleEmitter.prototype.getPosition = function() {
        return this._position;
      };

      ParticleEmitter.prototype.setPosition = function(position) {
        if (Object.prototype.toString.call(position) === "[object Object]") {
          this._position.x = (typeof position.x === "number" ? position.x : this._position.x);
          this._position.y = (typeof position.y === "number" ? position.y : this._position.y);
          this._position.z = (typeof position.z === "number" ? position.z : this._position.z);
          return true;
        }
        return false;
      };

      ParticleEmitter.prototype.spawn = function(amount, data) {
        var a, particle, settings, _results;
        amount = (typeof amount === "number" ? amount : null);
        data = (Object.prototype.toString.call(data) === "[object Object]" ? data : null);
        if (amount === null || data === null) {
          return;
        }
        settings = this._cache.settings;
        a = 0;
        _results = [];
        while (a < amount) {
          if (data.position) {
            settings.position.x = data.position.x || this._position.x;
            settings.position.y = data.position.y || this._position.y;
            settings.position.z = data.position.z || this._position.z;
          } else {
            settings.position.x = this._position.x;
            settings.position.y = this._position.y;
            settings.position.z = this._position.z;
          }
          if (data.velocity && Object.prototype.toString.call(data.velocity.x) === "[object Array]") {
            settings.velocity.x = (data.velocity.x[0] + Math.random() * (data.velocity.x[1] - data.velocity.x[0])) | 0;
            settings.velocity.y = (data.velocity.y[0] + Math.random() * (data.velocity.y[1] - data.velocity.y[0])) | 0;
            settings.velocity.z = (data.velocity.z[0] + Math.random() * (data.velocity.z[1] - data.velocity.z[0])) | 0;
          } else if (data.velocity) {
            settings.velocity.x = data.velocity.x || 0;
            settings.velocity.y = data.velocity.y || 0;
            settings.velocity.z = data.velocity.z || 0;
          } else {
            settings.velocity.x = 0;
            settings.velocity.y = 0;
            settings.velocity.z = 0;
          }
          if (Object.prototype.toString.call(data.mass) === "[object Array]") {
            settings.mass = data.mass[0] + Math.random() * (data.mass[1] - data.mass[0]);
          } else {
            settings.mass = data.mass || 1;
          }
          particle = new lychee.physics.Particle(settings);
          this._graph.add(particle);
          _results.push(a++);
        }
        return _results;
      };

      ParticleEmitter.prototype.setSpawn = function(delta, amount, data, settings, scope) {
        var spawn;
        delta = (typeof delta === "number" ? delta : (data.delta ? data.delta : null));
        amount = (typeof amount === "number" ? amount : (data.amount ? data.amount : null));
        settings = (Object.prototype.toString.call(settings) === "[object Object]" ? settings : null);
        scope = (scope !== void 0 ? scope : this);
        spawn = null;
        if (delta !== null && Object.prototype.toString.call(data) === "[object Object]") {
          if (data.callback instanceof Function) {
            spawn = {
              start: this._clock,
              delta: delta,
              step: 0,
              amount: amount,
              callback: data.callback,
              clear: data.clear || null,
              scope: scope
            };
            if (Object.prototype.toString.call(data.defaults) === "[object Object]") {
              spawn.settings = lychee.extend({}, data.defaults, settings);
            } else {
              spawn.settings = settings;
            }
          }
        }
        if (spawn !== null) {
          return this._spawn = spawn;
        }
      };

      return ParticleEmitter;

    })();
  });

}).call(this);
