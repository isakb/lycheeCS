// Generated by CoffeeScript 1.4.0
(function() {

  lychee.define("lychee.physics.Particle").exports(function(lychee, global) {
    return lychee.physics.Particle = (function() {

      function Particle() {}

      Particle.prototype.constructoor = function(data) {
        var settings;
        settings = lychee.extend({}, this.defaults, data);
        this._force = {
          x: 0,
          y: 0,
          z: 0
        };
        this._position = {
          x: 0,
          y: 0,
          z: 0
        };
        this._velocity = {
          x: 0,
          y: 0,
          z: 0
        };
        this._damping = 1;
        this._inverseMass = null;
        settings.force !== null && this.setForce(settings.force);
        settings.mass !== null && this.setMass(settings.mass);
        settings.position !== null && this.setPosition(settings.position);
        settings.velocity !== null && this.setVelocity(settings.velocity);
        return settings = null;
      };

      Particle.prototype.defaults = {
        force: null,
        mass: null,
        position: null,
        velocity: null
      };

      Particle.prototype.update = function(clock, delta) {
        var t;
        if (this._inverseMass === null) {
          return;
        }
        t = delta / 1000;
        if (t > 0) {
          this._position.x += this._velocity.x * t;
          this._position.y += this._velocity.y * t;
          this._position.z += this._velocity.z * t;
          this._velocity.x += (this._force.x * this._inverseMass) * t;
          this._velocity.y += (this._force.y * this._inverseMass) * t;
          return this._velocity.z += (this._force.z * this._inverseMass) * t;
        }
      };

      Particle.prototype.getDamping = function() {
        return this._damping;
      };

      Particle.prototype.setDamping = function(damping) {
        damping = (typeof damping === "number" ? damping : null);
        if (damping !== null) {
          this._damping = damping;
          return true;
        }
        return false;
      };

      Particle.prototype.getForce = function() {
        return this._force;
      };

      Particle.prototype.setForce = function(force) {
        if (Object.prototype.toString.call(force) === "[object Object]") {
          this._force.x = (typeof force.x === "number" ? force.x : this._force.x);
          this._force.y = (typeof force.y === "number" ? force.y : this._force.y);
          this._force.z = (typeof force.z === "number" ? force.z : this._force.z);
          return true;
        }
        return false;
      };

      Particle.prototype.getMass = function() {
        if (this._inverseMass !== null) {
          return 1 / this._inverseMass;
        }
        return Infinity;
      };

      Particle.prototype.setMass = function(mass) {
        if (mass !== 0) {
          this._inverseMass = 1 / mass;
          return true;
        }
        return false;
      };

      Particle.prototype.getPosition = function() {
        return this._position;
      };

      Particle.prototype.setPosition = function(position) {
        if (Object.prototype.toString.call(position) === "[object Object]") {
          this._position.x = (typeof position.x === "number" ? position.x : this._position.x);
          this._position.y = (typeof position.y === "number" ? position.y : this._position.y);
          this._position.z = (typeof position.z === "number" ? position.z : this._position.z);
          return true;
        }
        return false;
      };

      Particle.prototype.getVelocity = function() {
        return this._velocity;
      };

      Particle.prototype.setVelocity = function(velocity) {
        if (Object.prototype.toString.call(velocity) === "[object Object]") {
          this._velocity.x = (typeof velocity.x === "number" ? velocity.x : this._velocity.x);
          this._velocity.y = (typeof velocity.y === "number" ? velocity.y : this._velocity.y);
          this._velocity.z = (typeof velocity.z === "number" ? velocity.z : this._velocity.z);
          return true;
        }
        return false;
      };

      return Particle;

    })();
  });

}).call(this);
