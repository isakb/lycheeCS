// Generated by CoffeeScript 1.4.0
(function() {

  lychee.define("lychee.game.Graph").exports(function(lychee) {
    var Node;
    Node = (function() {

      function Node(entity, parent) {
        this.entity = entity;
        this.parent = parent;
        this.children = [];
      }

      Node.prototype.setParent = function(node) {
        if (node instanceof Node || node === null) {
          return this.parent = node;
        }
      };

      Node.prototype.addChild = function(node) {
        var c, found, _i, _ref;
        found = false;
        for (c = _i = 0, _ref = this.children.length; 0 <= _ref ? _i < _ref : _i > _ref; c = 0 <= _ref ? ++_i : --_i) {
          if (this.children[c] === node) {
            found = true;
            break;
          }
        }
        if (!found) {
          if (node.parent !== null) {
            node.parent.removeChild(node);
          }
          node.setParent(this);
          return this.children.push(node);
        }
      };

      Node.prototype.removeChild = function(node) {
        var c, found, l;
        found = false;
        c = 0;
        l = this.children.length;
        while (c < l) {
          if (this.children[c] === node) {
            found = true;
            this.children.splice(c, 1);
            l -= 1;
          }
          c += 1;
        }
        if (found === true) {
          return node.setParent(null);
        }
      };

      return Node;

    })();
    return lychee.game.Graph = (function() {

      function Graph() {
        this._dirty = false;
        this._tree = new Node(null, null);
      }

      Graph.prototype.reset = function() {
        this._dirty = false;
        return this._tree = new Node(null, null);
      };

      Graph.prototype.add = function(entity, parent) {
        var node;
        parent = parent instanceof Node ? parent : null;
        node = this._getNodeByEntity(entity);
        if (node === null) {
          node = new Node(entity, parent);
          if (parent === null) {
            this._tree.addChild(node);
            this._dirty = true;
          }
        }
        if (parent !== null) {
          parent.addChild(node);
          this._dirty = true;
        }
        return node;
      };

      Graph.prototype.remove = function(node) {
        if (!node instanceof Node) {
          node = this._getNodeByEntity(entity);
        }
        if (node !== null) {
          if (node.parent !== null) {
            node.parent.removeChild(node);
          }
          return true;
        }
        return false;
      };

      Graph.prototype.update = function(clock, delta) {
        return this._updateNode(this._tree, clock, delta);
      };

      Graph.prototype.getEntityByPosition = function(x, y, z) {
        var found;
        x = (typeof x === "number" ? x : null);
        y = (typeof y === "number" ? y : null);
        z = (typeof z === "number" ? z : null);
        found = this._getNodeByPosition(x, y, z);
        if (found !== null) {
          return found.entity;
        }
        return null;
      };

      Graph.prototype._updateNode = function(node, clock, delta) {
        var c, l, _results;
        if (node.entity !== null) {
          node.entity.update(clock, delta);
        }
        c = 0;
        l = node.children.length;
        _results = [];
        while (c < l) {
          this._updateNode(node.children[c], clock, delta);
          _results.push(c++);
        }
        return _results;
      };

      Graph.prototype._getNodeByEntity = function(entity, node) {
        var c, found, l;
        if (entity === null) {
          return null;
        }
        if (node == null) {
          node = this._tree;
        }
        found = null;
        if (node.entity !== null && node.entity === entity) {
          found = node;
        }
        c = 0;
        l = node.children.length;
        while (c < l) {
          found = this._getNodeByEntity(entity, node.children[c]);
          if (found !== null) {
            break;
          }
          c++;
        }
        return found;
      };

      Graph.prototype._getNodeByPosition = function(x, y, z, node, posX, posY, posZ) {
        var c, found, foundchild, hdepth, hheight, hwidth, l, position;
        if (node == null) {
          node = this._tree;
          posX = 0;
          posY = 0;
          posZ = 0;
        }
        found = null;
        if (node.entity !== null) {
          position = node.entity.getPosition();
          hwidth = (node.entity.width / 2) || node.entity.radius || 0;
          hheight = (node.entity.height / 2) || node.entity.radius || 0;
          hdepth = (node.entity.depth / 2) || node.entity.radius || 0;
          posX += position.x;
          posY += position.y;
          posZ += position.z;
          if ((x === null || (x >= posX - hwidth && x <= posX + hwidth)) && (y === null || (y >= posY - hheight && y <= posY + hheight)) && (z === null || (z >= posZ - hdepth && y <= posZ + hdepth))) {
            found = node;
          }
        }
        c = 0;
        l = node.children.length;
        while (c < l) {
          foundchild = this._getNodeByPosition(x, y, z, node.children[c], posX, posY, posZ);
          if (foundchild !== null) {
            found = foundchild;
          }
          c++;
        }
        return found;
      };

      return Graph;

    })();
  });

}).call(this);
