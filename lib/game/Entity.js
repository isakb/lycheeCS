// Generated by CoffeeScript 1.6.3
(function() {
  lychee.define("lychee.game.Entity").exports(function(lychee) {
    var Class;
    return Class = lychee.game.Entity = (function() {
      function Entity(data) {
        var duration, loop_, settings;
        settings = lychee.extend({}, this.defaults, data);
        this._clock = null;
        this._animation = null;
        this._collision = null;
        this._effect = null;
        this._position = {
          x: 0,
          y: 0,
          z: 0
        };
        this._velocity = {
          x: 0,
          y: 0,
          z: 0
        };
        this._shape = null;
        this._state = "default";
        this._tween = null;
        this._states = lychee.extend({}, this.defaults.states, settings.states);
        this._cache = {
          position: {},
          tween: {},
          effect: {}
        };
        this.width = settings.width;
        this.height = settings.height;
        this.radius = settings.radius;
        this.setPosition(settings.position);
        this.setCollisionType(settings.collision);
        this.setShape(settings.shape);
        this.setState(settings.state);
        if (Object.prototype.toString.call(settings.animation) === "[object Object]") {
          if (typeof settings.animation.duration === "number") {
            duration = settings.animation.duration;
            loop_ = (settings.animation.loop === true ? true : false);
            delete settings.animation.duration;
            delete settings.animation.loop;
            this.setAnimation(duration, settings.animation, loop_);
          }
        }
        settings = null;
      }

      Entity.COLLISION = {
        none: 0,
        A: 1,
        B: 2,
        C: 3,
        D: 4
      };

      Entity.EFFECT = {
        wobble: {
          duration: 1000,
          defaults: {
            x: 0,
            y: 0,
            z: 0
          },
          callback: function(effect, t) {
            var position, s;
            s = effect.settings;
            if (effect.origin === void 0) {
              position = this.getPosition();
              effect.origin = {
                x: position.x,
                y: position.y,
                z: position.z
              };
            }
            this._cache.effect.x = effect.origin.x + Math.sin(t * 2 * Math.PI) * s.x;
            this._cache.effect.y = effect.origin.y + Math.sin(t * 2 * Math.PI) * s.y;
            this._cache.effect.z = effect.origin.z + Math.sin(t * 2 * Math.PI) * s.z;
            return this.setPosition(this._cache.effect);
          },
          clear: function(effect) {
            return this.setPosition(effect.origin);
          }
        }
      };

      Entity.SHAPE = {
        circle: 0,
        sphere: 1,
        rectangle: 2,
        cuboid: 3,
        polygon: 4
      };

      Entity.TWEEN = {
        linear: function(t, dx, dy, dz) {
          this._cache.tween.x = t * dx;
          this._cache.tween.y = t * dy;
          this._cache.tween.z = t * dz;
          return this._cache.tween;
        },
        easeIn: function(t, dx, dy, dz) {
          var f;
          f = 1 * Math.pow(t, 3);
          this._cache.tween.x = f * dx;
          this._cache.tween.y = f * dy;
          this._cache.tween.z = f * dz;
          return this._cache.tween;
        },
        easeOut: function(t, dx, dy, dz) {
          var f;
          f = Math.pow(t - 1, 3) + 1;
          this._cache.tween.x = f * dx;
          this._cache.tween.y = f * dy;
          this._cache.tween.z = f * dz;
          return this._cache.tween;
        },
        easeInOut: function(t, dx, dy, dz) {
          var f;
          f = void 0;
          if ((t /= 0.5) < 1) {
            f = 0.5 * Math.pow(t, 3);
          } else {
            f = 0.5 * (Math.pow(t - 2, 3) + 2);
          }
          this._cache.tween.x = f * dx;
          this._cache.tween.y = f * dy;
          this._cache.tween.z = f * dz;
          return this._cache.tween;
        },
        bounceEaseIn: function(t, dx, dy, dz) {
          var f, k;
          k = 1 - t;
          if ((k /= 1) < (1 / 2.75)) {
            f = 1 * (7.5625 * Math.pow(k, 2));
          } else if (k < (2 / 2.75)) {
            f = 7.5625 * (k -= 1.5 / 2.75) * k + .75;
          } else if (k < (2.5 / 2.75)) {
            f = 7.5625 * (k -= 2.25 / 2.75) * k + .9375;
          } else {
            f = 7.5625 * (k -= 2.625 / 2.75) * k + .984375;
          }
          this._cache.tween.x = (1 - f) * dx;
          this._cache.tween.y = (1 - f) * dy;
          this._cache.tween.z = (1 - f) * dz;
          return this._cache.tween;
        },
        bounceEaseOut: function(t, dx, dy, dz) {
          var f;
          f = void 0;
          if ((t /= 1) < (1 / 2.75)) {
            f = 1 * (7.5625 * Math.pow(t, 2));
          } else if (t < (2 / 2.75)) {
            f = 7.5625 * (t -= 1.5 / 2.75) * t + .75;
          } else if (t < (2.5 / 2.75)) {
            f = 7.5625 * (t -= 2.25 / 2.75) * t + .9375;
          } else {
            f = 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
          }
          this._cache.tween.x = f * dx;
          this._cache.tween.y = f * dy;
          this._cache.tween.z = f * dz;
          return this._cache.tween;
        },
        sinEaseIn: function(t, dx, dy, dz) {
          var f;
          f = -1 * Math.cos(t * Math.PI / 2) + 1;
          this._cache.tween.x = f * dx;
          this._cache.tween.y = f * dy;
          this._cache.tween.z = f * dz;
          return this._cache.tween;
        },
        sinEaseOut: function(t, dx, dy, dz) {
          var f;
          f = 1 * Math.sin(t * Math.PI / 2);
          this._cache.tween.x = f * dx;
          this._cache.tween.y = f * dy;
          this._cache.tween.z = f * dz;
          return this._cache.tween;
        }
      };

      Entity.prototype.defaults = {
        position: {
          x: 0,
          y: 0,
          z: 0
        },
        radius: 0,
        width: 0,
        height: 0,
        shape: Entity.SHAPE.circle,
        collision: Entity.COLLISION.none,
        states: {
          "default": 0
        }
      };

      Entity.prototype.sync = function(clock, force) {
        force = (force === true ? true : false);
        if (force === true) {
          this._clock = clock;
        }
        if (this._clock === null) {
          if (this._tween !== null) {
            this._tween.start = clock;
          }
          if (this._effect !== null) {
            this._effect.start = clock;
          }
          if (this._animation !== null) {
            this._animation.start = clock;
          }
          return this._clock = clock;
        }
      };

      Entity.prototype.update = function(clock, delta) {
        var cache, diff, dt, t;
        if (this._clock === null) {
          this.sync(clock);
        }
        t = 0;
        dt = delta / 1000;
        cache = this._cache.position;
        if (this._tween !== null && (this._clock <= this._tween.start + this._tween.duration)) {
          t = (this._clock - this._tween.start) / this._tween.duration;
          if (typeof this._position.x === "number") {
            cache.x = this._tween.to.x - this._tween.from.x;
          } else {
            cache.x = 0;
          }
          if (typeof this._position.y === "number") {
            cache.y = this._tween.to.y - this._tween.from.y;
          } else {
            cache.y = 0;
          }
          if (typeof this._position.z === "number") {
            cache.z = this._tween.to.z - this._tween.from.z;
          } else {
            cache.z = 0;
          }
          diff = this._tween.callback.call(this._tween.scope, t, cache.x, cache.y, cache.z);
          if (typeof this._position.x === "number") {
            cache.x = this._tween.from.x + diff.x;
          }
          if (typeof this._position.y === "number") {
            cache.y = this._tween.from.y + diff.y;
          }
          if (typeof this._position.z === "number") {
            cache.z = this._tween.from.z + diff.z;
          }
          this.setPosition(cache);
        } else if (this._tween !== null) {
          this.setPosition(this._tween.to);
          this._tween = null;
        }
        if (this._velocity.x !== 0 || this._velocity.y !== 0 || this._velocity.z !== 0) {
          cache.x = this._position.x;
          cache.y = this._position.y;
          cache.z = this._position.z;
          if (this._velocity.x !== 0) {
            cache.x += this._velocity.x * dt;
          }
          if (this._velocity.y !== 0) {
            cache.y += this._velocity.y * dt;
          }
          if (this._velocity.z !== 0) {
            cache.z += this._velocity.z * dt;
          }
          this.setPosition(cache);
        }
        if (this._effect !== null && (this._clock <= this._effect.start + this._effect.duration)) {
          t = (this._clock - this._effect.start) / this._effect.duration;
          this._effect.callback.call(this._effect.scope, this._effect, t);
        } else if (this._effect !== null) {
          if (this._effect.loop === true) {
            this._effect.start = this._clock;
          } else {
            this._effect = null;
          }
        }
        if (this._animation !== null && (this._clock <= this._animation.start + this._animation.duration)) {
          t = (this._clock - this._animation.start) / this._animation.duration;
          this._animation.frame = Math.max(0, Math.ceil(t * this._animation.frames) - 1);
        } else if (this._animation !== null) {
          if (this._animation.loop === true) {
            this._animation.start = this._clock;
          } else {
            this._animation = null;
          }
        }
        return this._clock = clock;
      };

      Entity.prototype.setTween = function(duration, position, callback, scope) {
        var pos, tween;
        duration = (typeof duration === "number" ? duration : 0);
        callback = (callback instanceof Function ? callback : Class.TWEEN.linear);
        scope = (scope !== void 0 ? scope : this);
        if (Object.prototype.toString.call(position) === "[object Object]") {
          position.x = (typeof position.x === "number" ? position.x : this._position.x);
          position.y = (typeof position.y === "number" ? position.y : this._position.y);
          position.z = (typeof position.z === "number" ? position.z : this._position.z);
          pos = this.getPosition();
          tween = {
            start: this._clock,
            duration: duration,
            from: {
              x: pos.x,
              y: pos.y,
              z: pos.z
            },
            to: position,
            callback: callback,
            scope: scope
          };
          return this._tween = tween;
        }
      };

      Entity.prototype.clearTween = function() {
        return this._tween = null;
      };

      Entity.prototype.getPosition = function() {
        return this._position;
      };

      Entity.prototype.setPosition = function(position) {
        if (Object.prototype.toString.call(position) !== "[object Object]") {
          return false;
        }
        this._position.x = (typeof position.x === "number" ? position.x : this._position.x);
        this._position.y = (typeof position.y === "number" ? position.y : this._position.y);
        this._position.z = (typeof position.z === "number" ? position.z : this._position.z);
        return true;
      };

      Entity.prototype.getVelocity = function() {
        return this._velocity;
      };

      Entity.prototype.setVelocity = function(velocity) {
        if (Object.prototype.toString.call(velocity) !== "[object Object]") {
          return false;
        }
        this._velocity.x = (typeof velocity.x === "number" ? velocity.x : this._velocity.x);
        this._velocity.y = (typeof velocity.y === "number" ? velocity.y : this._velocity.y);
        this._velocity.z = (typeof velocity.z === "number" ? velocity.z : this._velocity.z);
        return true;
      };

      Entity.prototype.getState = function() {
        return this._state;
      };

      Entity.prototype.setState = function(id) {
        id = (typeof id === "string" ? id : null);
        if (id !== null && this._states[id] !== void 0) {
          this._state = id;
          return true;
        }
        return false;
      };

      Entity.prototype.collidesWith = function(entity) {
        var collisionDistance, halfHeight, halfWidth, posA, posB, radius, realDistance, shapeA, shapeB;
        if (this.getCollisionType() === Class.COLLISION.none || entity.getCollisionType() === Class.COLLISION.none) {
          return false;
        }
        shapeA = this.getShape();
        shapeB = entity.getShape();
        posA = this.getPosition();
        posB = entity.getPosition();
        if (shapeA === Class.SHAPE.circle && shapeB === Class.SHAPE.circle) {
          collisionDistance = this.radius + entity.radius;
          realDistance = Math.sqrt(Math.pow(posB.x - posA.x, 2) + Math.pow(posB.y - posA.y, 2));
          if (realDistance <= collisionDistance) {
            return true;
          }
        } else if (shapeA === Class.SHAPE.circle && shapeB === Class.SHAPE.rectangle) {
          radius = this.radius;
          halfWidth = entity.width / 2;
          halfHeight = entity.height / 2;
          if ((posA.x + radius > posB.x - halfWidth) && (posA.x - radius < posB.x + halfWidth) && (posA.y + radius > posB.y - halfHeight) && (posA.y - radius < posB.y + halfHeight)) {
            return true;
          }
        } else if (shapeA === Class.SHAPE.rectangle && shapeB === Class.SHAPE.circle) {
          radius = entity.radius;
          halfWidth = this.width / 2;
          halfHeight = this.height / 2;
          if ((posA.x + radius > posB.x - halfWidth) && (posA.x - radius < posB.x + halfWidth) && (posA.y + radius > posB.y - halfHeight) && (posA.y - radius < posB.y + halfHeight)) {
            return true;
          }
        }
        return false;
      };

      Entity.prototype.getCollisionType = function() {
        return this._collision;
      };

      Entity.prototype.setCollisionType = function(type) {
        var found, id;
        found = false;
        for (id in Class.COLLISION) {
          if (type === Class.COLLISION[id]) {
            found = true;
            break;
          }
        }
        if (found === true) {
          this._collision = type;
        }
        return found;
      };

      Entity.prototype.getShape = function() {
        return this._shape;
      };

      Entity.prototype.setShape = function(shape) {
        var found, id;
        found = false;
        for (id in Class.SHAPE) {
          if (shape === Class.SHAPE[id]) {
            found = true;
            break;
          }
        }
        if (found === true) {
          this._shape = shape;
        }
        return found;
      };

      Entity.prototype.getFrame = function() {
        if (this._animation === null) {
          return 0;
        } else {
          return this._animation.frame;
        }
      };

      Entity.prototype.setAnimation = function(duration, settings, loop_) {
        var animation;
        duration = (typeof duration === "number" ? duration : null);
        settings = (Object.prototype.toString.call(settings) === "[object Object]" ? settings : null);
        loop_ = (loop_ === true ? true : false);
        if (duration !== null || settings !== null) {
          settings.frame = settings.frame || 0;
          settings.frames = settings.frames || 10;
          animation = {
            start: this._clock,
            frame: settings.frame,
            frames: settings.frames,
            duration: duration,
            loop: loop_
          };
          return this._animation = animation;
        }
      };

      Entity.prototype.clearAnimation = function() {
        return this._animation = null;
      };

      Entity.prototype.setEffect = function(duration, data, settings, scope, loop_) {
        var effect, position;
        duration = (typeof duration === "number" ? duration : (data.duration ? data.duration : null));
        settings = (Object.prototype.toString.call(settings) === "[object Object]" ? settings : null);
        scope = (scope !== void 0 ? scope : this);
        loop_ = (loop_ === true ? true : false);
        if (duration !== null && Object.prototype.toString.call(data) === "[object Object]" && data.callback instanceof Function) {
          position = this.getPosition();
          effect = {
            start: this._clock,
            callback: data.callback,
            clear: data.clear || null,
            duration: duration,
            scope: scope,
            loop: loop_,
            origin: {
              x: position.x,
              y: position.y,
              z: position.z
            }
          };
          if (Object.prototype.toString.call(data.defaults) === "[object Object]") {
            effect.settings = lychee.extend({}, data.defaults, settings);
          } else {
            effect.settings = settings;
          }
          return this._effect = effect;
        }
      };

      Entity.prototype.clearEffect = function() {
        if (this._effect !== null && this._effect.clear !== null) {
          this._effect.clear.call(this._effect.scope, this._effect);
        }
        return this._effect = null;
      };

      return Entity;

    })();
  });

}).call(this);
