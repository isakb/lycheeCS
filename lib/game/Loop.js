// Generated by CoffeeScript 1.4.0
(function() {

  lychee.define("lychee.game.Loop").includes(["lychee.Events"]).supports(function(lychee, global) {
    if (typeof setInterval === "function") {
      return true;
    }
    return false;
  }).exports(function(lychee, global) {
    var _instances, _intervalId, _listeners, _timeoutId;
    _instances = [];
    _listeners = {
      interval: function() {
        var clock, i, instance, l, _results;
        i = 0;
        l = _instances.length;
        _results = [];
        while (i < l) {
          instance = _instances[i];
          clock = Date.now() - instance._clock.start;
          instance._updateLoop(clock);
          instance._renderLoop(clock);
          _results.push(i++);
        }
        return _results;
      }
    };
    (function(callsPerSecond) {
      var interval, methods;
      interval = typeof setInterval === "function";
      if (interval === true) {
        global.setInterval(_listeners.interval, callsPerSecond);
      }
      if (lychee.debug === true) {
        methods = [];
        if (interval) {
          methods.push("setInterval");
        }
        if (methods.length === 0) {
          methods.push("NONE");
        }
        return console.log("lychee.game.Loop: Supported interval methods are " + methods.join(", "));
      }
    })(1000 / 60);
    _timeoutId = 0;
    _intervalId = 0;
    return lychee.game.Loop = (function() {

      function Loop(data) {
        var ok, settings;
        settings = lychee.extend({}, data);
        this._timeouts = {};
        this._intervals = {};
        this._state = "running";
        lychee.Events.call(this, "loop");
        ok = this.reset(settings.update, settings.render);
        if (ok === true) {
          _instances.push(this);
        }
        settings = null;
      }

      Loop.prototype.reset = function(updateFps, renderFps) {
        updateFps = (typeof updateFps === "number" ? updateFps : 0);
        renderFps = (typeof renderFps === "number" ? renderFps : 0);
        if (updateFps < 0) {
          updateFps = 0;
        }
        if (renderFps < 0) {
          renderFps = 0;
        }
        if (updateFps === 0 && renderFps === 0) {
          return false;
        }
        this._clock = {
          start: Date.now(),
          update: 0,
          render: 0
        };
        this._ms = {};
        if (updateFps > 0) {
          this._ms.update = 1000 / updateFps;
        }
        if (renderFps > 0) {
          this._ms.render = 1000 / updateFps;
        }
        this._updateFps = updateFps;
        this._renderFps = renderFps;
        return true;
      };

      Loop.prototype.start = function() {
        return this._state = "running";
      };

      Loop.prototype.stop = function() {
        return this._state = "stopped";
      };

      Loop.prototype.timeout = function(delta, callback, scope) {
        var id, that;
        delta = (typeof delta === "number" ? delta : null);
        callback = (callback instanceof Function ? callback : null);
        scope = (scope !== void 0 ? scope : global);
        if (delta === null || callback === null) {
          return null;
        }
        id = _timeoutId++;
        this._timeouts[id] = {
          start: this._clock.update + delta,
          callback: callback,
          scope: scope
        };
        that = this;
        return {
          clear: function() {
            return that._timeouts[id] = null;
          }
        };
      };

      Loop.prototype.interval = function(delta, callback, scope) {
        var id, that;
        delta = (typeof delta === "number" ? delta : null);
        callback = (callback instanceof Function ? callback : null);
        scope = (scope !== void 0 ? scope : global);
        if (delta === null || callback === null) {
          return null;
        }
        id = _intervalId++;
        this._intervals[id] = {
          start: this._clock.update + delta,
          delta: delta,
          step: 0,
          callback: callback,
          scope: scope
        };
        that = this;
        return {
          clear: function() {
            return that._intervals[id] = null;
          }
        };
      };

      Loop.prototype.isRunning = function() {
        return this._state === "running";
      };

      Loop.prototype._renderLoop = function(clock) {
        var delta;
        if (this._state !== "running") {
          return;
        }
        delta = clock - this._clock.render;
        if (delta >= this._ms.render) {
          this.trigger("render", [clock, delta]);
          return this._clock.render = clock;
        }
      };

      Loop.prototype._updateLoop = function(clock) {
        var curStep, data, delta, iId, tId, _results;
        if (this._state !== "running") {
          return;
        }
        delta = clock - this._clock.update;
        if (delta >= this._ms.update) {
          this.trigger("update", [clock, delta]);
          this._clock.update = clock;
        }
        data = void 0;
        for (iId in this._intervals) {
          data = this._intervals[iId];
          if (data === null) {
            continue;
          }
          curStep = Math.floor((clock - data.start) / data.delta);
          if (curStep > data.step) {
            data.step = curStep;
            data.callback.call(data.scope, clock - data.start, curStep);
          }
        }
        _results = [];
        for (tId in this._timeouts) {
          data = this._timeouts[tId];
          if (data === null) {
            continue;
          }
          if (clock >= data.start) {
            this._timeouts[tId] = null;
            _results.push(data.callback.call(data.scope, clock));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return Loop;

    })();
  });

}).call(this);
