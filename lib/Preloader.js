// Generated by CoffeeScript 1.6.3
(function() {
  (function(lychee, global) {
    var _cache, _globalInterval, _globalIntervalId, _instances;
    _instances = [];
    _cache = {};
    _globalIntervalId = null;
    _globalInterval = function() {
      var errors, i, instance, isReady, map, ready, timedOut, timedOutInstances, url, _i, _j, _len, _len1;
      timedOutInstances = 0;
      for (_i = 0, _len = _instances.length; _i < _len; _i++) {
        instance = _instances[_i];
        isReady = true;
        for (url in instance._pending) {
          if (instance._pending[url] === true || _cache[url] === void 0) {
            isReady = false;
          }
        }
        timedOut = false;
        if (instance._clock !== null) {
          timedOut = Date.now() >= instance._clock + instance._timeout;
        }
        if (isReady === true || timedOut === true) {
          errors = {};
          ready = {};
          map = {};
          for (url in instance._pending) {
            if (instance._fired[url] === void 0) {
              if (instance._pending[url] === false) {
                ready[url] = _cache[url] || null;
              } else {
                errors[url] = null;
              }
              map[url] = instance._map[url] || null;
              instance._fired[url] = true;
            }
          }
          if (Object.keys(errors).length > 0) {
            instance.trigger("error", [errors, map]);
          }
          if (Object.keys(ready).length > 0) {
            instance.trigger("ready", [ready, map]);
          }
          if (timedOut === true) {
            timedOutInstances++;
          }
        }
      }
      if (timedOutInstances === _instances.length) {
        if (lychee.debug === true) {
          console.log("lychee.Preloader: Nothing to do, switching to idle mode.");
        }
        for (_j = 0, _len1 = _instances.length; _j < _len1; _j++) {
          i = _instances[_j];
          i._clock = null;
        }
        global.clearInterval(_globalIntervalId);
        return _globalIntervalId = null;
      }
    };
    return lychee.Preloader = (function() {
      function Preloader(data) {
        var settings;
        settings = lychee.extend({}, data);
        settings.timeout = (typeof settings.timeout === "number" ? settings.timeout : this.defaults.timeout);
        this._timeout = settings.timeout;
        this._events = {};
        this._fired = {};
        this._map = {};
        this._pending = {};
        this._clock = null;
        _instances.push(this);
        settings = null;
      }

      Preloader.prototype.defaults = {
        timeout: 3000
      };

      Preloader.prototype.bind = function(event, callback, scope) {
        event = (typeof event === "string" ? event : null);
        callback = (callback instanceof Function ? callback : null);
        scope = (scope !== void 0 ? scope : this);
        if (event !== null && callback !== null) {
          return this._events[event] = {
            callback: callback,
            scope: scope
          };
        }
      };

      Preloader.prototype.unbind = function(event) {
        event = (typeof event === "string" ? event : null);
        if (event !== null && this._events[event] !== void 0) {
          delete this._events[event];
          return true;
        }
        return false;
      };

      Preloader.prototype.trigger = function(event, args) {
        args = (Object.prototype.toString.call(args) === "[object Array]" ? args : []);
        if (this._events[event] !== void 0) {
          this._events[event].callback.apply(this._events[event].scope, args);
          return true;
        }
        return false;
      };

      Preloader.prototype.load = function(urls, map, forced) {
        var l, tmp, u, url;
        urls = (typeof urls === "string" ? [urls] : urls);
        map = (map !== void 0 ? map : null);
        forced = (typeof forced === "string" ? forced : null);
        if (Object.prototype.toString.call(urls) !== "[object Array]") {
          return false;
        }
        this._clock = Date.now();
        u = 0;
        l = urls.length;
        while (u < l) {
          url = urls[u];
          tmp = url.split(/\./);
          if (this._pending[url] === void 0) {
            if (map !== null) {
              this._map[url] = map;
            }
            if (_cache[url] != null) {
              this._pending[url] = false;
            } else {
              if (forced !== null) {
                this._load(url, forced, _cache);
              } else {
                this._load(url, tmp[tmp.length - 1], _cache);
              }
            }
          }
          u++;
        }
        if (_globalIntervalId === null) {
          return _globalIntervalId = global.setInterval(function() {
            return _globalInterval();
          }, 100);
        }
      };

      Preloader.prototype.get = function(url) {
        if (_cache[url] !== void 0) {
          return _cache[url];
        }
        return null;
      };

      Preloader.prototype._load = function(url, type, _cache) {
        throw new Error("lychee.Preloader: You need to include the platform-specific bootstrap.js to load other files.");
      };

      Preloader.prototype._progress = function(url, _cache) {};

      return Preloader;

    })();
  })(lychee, (typeof global !== "undefined" ? global : this));

}).call(this);
