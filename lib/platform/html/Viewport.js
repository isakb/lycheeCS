// Generated by CoffeeScript 1.6.3
(function() {
  lychee.define("Viewport").tags({
    platform: "html"
  }).includes(["lychee.Events"]).supports(function(lychee, global) {
    if (typeof global.addEventListener === "function" && typeof global.innerWidth === "number" && typeof global.innerHeight === "number") {
      return true;
    }
    return false;
  }).exports(function(lychee, global) {
    var Viewport, _active, _clock, _instances, _listeners;
    _clock = {
      orientationchange: null,
      resize: 0
    };
    _active = true;
    _instances = [];
    _listeners = {
      orientationchange: function() {
        var i, l, _results;
        _clock.orientationchange = Date.now();
        i = 0;
        l = _instances.length;
        _results = [];
        while (i < l) {
          _instances[i]._processOrientation(global.orientation);
          _results.push(i++);
        }
        return _results;
      },
      resize: function() {
        var i, l, _results;
        if (_clock.orientationchange === null || (_clock.orientationchange !== null && _clock.resize < _clock.orientationchange)) {
          _clock.resize = Date.now();
          i = 0;
          l = _instances.length;
          _results = [];
          while (i < l) {
            (function(instance) {
              return setTimeout((function() {
                return instance._processReshape(global.innerWidth, global.innerHeight);
              }), 500);
            })(_instances[i]);
            _results.push(i++);
          }
          return _results;
        }
      },
      focus: function() {
        var i, l;
        if (_active === false) {
          i = 0;
          l = _instances.length;
          while (i < l) {
            _instances[i]._processShow();
            i++;
          }
          return _active = true;
        }
      },
      blur: function() {
        var i, l;
        if (_active === true) {
          i = 0;
          l = _instances.length;
          while (i < l) {
            _instances[i]._processHide();
            i++;
          }
          return _active = false;
        }
      }
    };
    (function() {
      var methods;
      methods = [];
      if (typeof global.onorientationchange !== "undefined") {
        methods.push("orientationchange");
        global.addEventListener("orientationchange", _listeners.orientationchange, true);
      }
      if (typeof global.onfocus !== "undefined") {
        methods.push("focus");
        global.addEventListener("focus", _listeners.focus, true);
      }
      if (typeof global.onblur !== "undefined") {
        methods.push("blur");
        global.addEventListener("blur", _listeners.blur, true);
      }
      global.addEventListener("resize", _listeners.resize, true);
      if (lychee.debug === true) {
        return console.log("lychee.Viewport: Supported methods are " + methods.join(", "));
      }
    })();
    return Viewport = (function() {
      function Viewport() {
        this._orientation = (typeof global.orientation === "number" ? global.orientation : 0);
        this._width = global.innerWidth;
        this._height = global.innerHeight;
        lychee.Events.call(this, "viewport");
        _instances.push(this);
      }

      Viewport.prototype._processOrientation = function(orientation) {
        return this._orientation = orientation;
      };

      Viewport.prototype._processReshape = function(width, height) {
        this._width = width;
        this._height = height;
        if (this._orientation === 0) {
          if (width > height) {
            return this.trigger("reshape", ["landscape", "landscape", this._width, this._height]);
          } else {
            return this.trigger("reshape", ["portrait", "portrait", this._width, this._height]);
          }
        } else if (this._orientation === 90) {
          if (width > height) {
            return this.trigger("reshape", ["portrait", "landscape", this._width, this._height]);
          } else {
            return this.trigger("reshape", ["landscape", "portrait", this._width, this._height]);
          }
        } else if (this._orientation === -90) {
          if (width > height) {
            return this.trigger("reshape", ["portrait", "landscape", this._width, this._height]);
          } else {
            return this.trigger("reshape", ["landscape", "portrait", this._width, this._height]);
          }
        }
      };

      Viewport.prototype._processShow = function() {
        return this.trigger("show", []);
      };

      Viewport.prototype._processHide = function() {
        return this.trigger("hide", []);
      };

      return Viewport;

    })();
  });

}).call(this);
