// Generated by CoffeeScript 1.4.0
(function() {

  lychee.define("Input").tags({
    platform: "html"
  }).includes(["lychee.Events"]).supports(function(lychee, global) {
    if (global.document && typeof global.document.addEventListener === "function") {
      return true;
    }
    return false;
  }).exports(function(lychee, global) {
    var Class, Input, _instances, _listeners, _mouseactive;
    _instances = [];
    _mouseactive = false;
    _listeners = {
      keydown: function(event) {
        var instance, _i, _len;
        for (_i = 0, _len = _instances.length; _i < _len; _i++) {
          instance = _instances[_i];
          instance._processKeyEvent(event);
        }
        return null;
      },
      touchstart: function(event) {
        var instance, _i, _len, _ref;
        event.preventDefault();
        event.stopPropagation();
        for (_i = 0, _len = _instances.length; _i < _len; _i++) {
          instance = _instances[_i];
          if ((_ref = event.touches) != null ? _ref.length : void 0) {
            instance._processTouch(i, touches.pageX, touches.pageY);
          } else {
            instance._processTouch(0, event.pageX, event.pageY);
          }
        }
        return null;
      },
      touchmove: function(event) {
        var i, instance, touches, _i, _j, _len, _len1, _ref, _ref1;
        for (_i = 0, _len = _instances.length; _i < _len; _i++) {
          instance = _instances[_i];
          if ((_ref = event.touches) != null ? _ref.length : void 0) {
            _ref1 = event.touches;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              touches = _ref1[i];
              instance._processSwipe(i, "move", touches.pageX, touches.pageY);
            }
          } else {
            instance._processSwipe(0, "move", event.pageX, event.pageY);
          }
        }
        return null;
      },
      touchend: function(event) {
        var i, instance, touches, _i, _j, _len, _len1, _ref, _ref1;
        for (_i = 0, _len = _instances.length; _i < _len; _i++) {
          instance = _instances[_i];
          if ((_ref = event.touches) != null ? _ref.length : void 0) {
            _ref1 = event.touches;
            for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
              touches = _ref1[i];
              instance._processSwipe(i, "end", touches.pageX, touches.pageY);
            }
          } else {
            instance._processSwipe(0, "end", event.pageX, event.pageY);
          }
        }
        return null;
      },
      mousestart: function(event) {
        var instance, _i, _len;
        _mouseactive = true;
        for (_i = 0, _len = _instances.length; _i < _len; _i++) {
          instance = _instances[_i];
          instance._processTouch(0, event.pageX, event.pageY);
        }
        return null;
      },
      mousemove: function(event) {
        var instance, _i, _len;
        if (!_mouseactive) {
          return;
        }
        for (_i = 0, _len = _instances.length; _i < _len; _i++) {
          instance = _instances[_i];
          instance._processSwipe(0, "move", event.pageX, event.pageY);
        }
        return null;
      },
      mouseend: function(event) {
        var instance, _i, _len;
        if (!_mouseactive) {
          return;
        }
        _mouseactive = false;
        for (_i = 0, _len = _instances.length; _i < _len; _i++) {
          instance = _instances[_i];
          instance._processSwipe(0, "end", event.pageX, event.pageY);
        }
        return null;
      }
    };
    (function() {
      var eventName, keyboard, listen, methods, mouse, touch, _i, _len, _ref;
      keyboard = "onkeydown" in global;
      if (keyboard) {
        document.addEventListener("keydown", _listeners.keydown, true);
      }
      touch = "ontouchstart" in global;
      mouse = "onmousedown" in global;
      listen = function(eventName, listenerName) {
        if (listenerName == null) {
          listenerName = eventName;
        }
        return document.addEventListener(eventName, _listeners[listenerName], true);
      };
      if (touch) {
        _ref = ["touchstart", "touchmove", "touchend"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          eventName = _ref[_i];
          listen(eventName);
        }
      } else if (mouse) {
        listen("mousedown", "mousestart");
        listen("mousemove", "mousemove");
        listen("mouseup", "mouseend");
        listen("mouseout", "mouseend");
      }
      if (lychee.debug) {
        methods = [];
        if (keyboard) {
          methods.push("Keyboard");
        }
        if (touch) {
          methods.push("Touch");
        }
        if (mouse) {
          methods.push("Mouse");
        }
        if (methods.length === 0) {
          methods.push("NONE");
        }
        return console.log("lychee.Input: Supported input methods are " + methods.join(", "));
      }
    })();
    return Class = Input = (function() {

      function Input(data) {
        var settings;
        settings = lychee.extend({}, data);
        settings.fireKey = !!settings.fireKey;
        settings.fireModifier = !!settings.fireModifier;
        settings.fireTouch = !!settings.fireTouch;
        settings.fireSwipe = !!settings.fireSwipe;
        settings.delay = (typeof settings.delay === "number" ? settings.delay : 0);
        this._fireKey = settings.fireKey;
        this._fireModifier = settings.fireModifier;
        this._fireTouch = settings.fireTouch;
        this._fireSwipe = settings.fireSwipe;
        this._delay = settings.delay;
        this.reset();
        lychee.Events.call(this, "input");
        _instances.push(this);
        settings = null;
      }

      Input.KEYMAP = {
        8: "backspace",
        9: "tab",
        13: "enter",
        16: "shift",
        17: "ctrl",
        18: "alt",
        19: "pause",
        27: "escape",
        32: "space",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z"
      };

      Input.prototype.reset = function() {
        this._touchareas = null;
        this._touchareas = {};
        this._swipes = null;
        this._swipes = {
          0: null,
          1: null,
          2: null,
          3: null,
          4: null,
          5: null,
          6: null,
          7: null,
          8: null,
          9: null
        };
        this._clock = null;
        return this._clock = {
          key: Date.now(),
          touch: Date.now(),
          swipe: Date.now()
        };
      };

      Input.prototype.addToucharea = function(id, box) {
        id = (typeof id === "string" ? id : null);
        if (id !== null && Object.prototype.toString.call(box) === "[object Object]" && this._touchareas[id] === void 0) {
          this._touchareas[id] = {
            id: id,
            x1: (typeof box.x1 === "number" ? box.x1 : 0),
            x2: (typeof box.x2 === "number" ? box.x2 : Infinity),
            y1: (typeof box.y1 === "number" ? box.y1 : 0),
            y2: (typeof box.y2 === "number" ? box.y2 : Infinity)
          };
          return true;
        }
        return false;
      };

      Input.prototype.removeToucharea = function(id) {
        id = (typeof id === "string" ? id : null);
        if (id !== null && this._touchareas[id] !== void 0) {
          delete this._touchareas[id];
          return true;
        }
        return false;
      };

      Input.prototype._processKeyEvent = function(event) {
        var alt, altKey, ctrl, ctrlKey, delta, key, keyCode, name, shift, shiftKey;
        keyCode = event.keyCode, ctrlKey = event.ctrlKey, altKey = event.altKey, shiftKey = event.shiftKey;
        if (!this._fireKey) {
          return;
        }
        if (Class.KEYMAP[keyCode] === void 0) {
          return;
        }
        ctrl = !!ctrlKey;
        alt = !!altKey;
        shift = !!shiftKey;
        delta = Date.now() - this._clock.key;
        if (delta < this._delay) {
          return;
        }
        if (!this._fireModifiers && (keyCode === 16 || keyCode === 17 || keyCode === 18) && (ctrl || alt || shift)) {
          return;
        }
        key = Class.KEYMAP[keyCode];
        name = "";
        if (ctrl && key !== "ctrl") {
          name += "ctrl-";
        }
        if (alt && key !== "alt") {
          name += "alt-";
        }
        if (shift && key !== "shift") {
          name += "shift-";
          key = String.fromCharCode(keyCode);
        }
        name += key.toLowerCase();
        if (this._events[name]) {
          event.preventDefault();
          event.stopPropagation();
        }
        if (lychee.debug) {
          console.log("lychee.Input:", key, name, delta);
        }
        this.trigger("key", [key, name, delta]);
        this.trigger(name, [delta]);
        return this._clock.key = Date.now();
      };

      Input.prototype._processTouch = function(id, x, y) {
        var cancelSwipe, delta, tid, toucharea;
        if (!this._fireTouch) {
          return;
        }
        delta = Date.now() - this._clock.touch;
        if (delta < this._delay) {
          return;
        }
        cancelSwipe = this.trigger("touch", [
          id, {
            x: x,
            y: y
          }, delta
        ]) ? true : false;
        for (tid in this._touchareas) {
          toucharea = this._touchareas[tid];
          if (x > toucharea.x1 && x < toucharea.x2 && y > toucharea.y1 && y < toucharea.y2) {
            this.trigger("toucharea-" + tid, [delta]);
          }
        }
        this._clock.touch = Date.now();
        if (cancelSwipe !== true && this._swipes[id] === null) {
          return this._processSwipe(id, "start", x, y);
        }
      };

      Input.prototype._processSwipe = function(id, state, x, y) {
        var delta, position, swipe;
        if (!this._fireSwipe) {
          return;
        }
        delta = Date.now() - this._clock.swipe;
        if (delta < this._delay) {
          return;
        }
        position = {
          x: x,
          y: y
        };
        swipe = {
          x: 0,
          y: 0
        };
        if (this._swipes[id] !== null) {
          swipe.x = x - this._swipes[id].x;
          swipe.y = y - this._swipes[id].y;
        }
        if (state === "start") {
          this.trigger("swipe", [id, "start", position, delta, swipe]);
          this._swipes[id] = {
            x: x,
            y: y
          };
        } else if (state === "move") {
          this.trigger("swipe", [id, "move", position, delta, swipe]);
        } else if (state === "end") {
          this.trigger("swipe", [id, "end", position, delta, swipe]);
          this._swipes[id] = null;
        }
        return this._clock.swipe = Date.now();
      };

      return Input;

    })();
  });

}).call(this);
