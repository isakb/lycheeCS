// Generated by CoffeeScript 1.4.0
(function() {

  lychee.define("Jukebox").tags({
    platform: "html"
  }).requires(["lychee.Track"]).exports(function(lychee, global) {
    var Jukebox;
    return Jukebox = (function() {

      function Jukebox(maxPoolSize) {
        this._maxPoolSize = (typeof maxPoolSize === "number" ? maxPoolSize : 8);
        this._tracks = {};
        this._pool = {};
        this._poolSize = 0;
      }

      Jukebox.prototype.add = function(track) {
        if (track instanceof lychee.Track) {
          return this._tracks[track.id] = track;
        }
      };

      Jukebox.prototype.play = function(id, loop_) {
        var pId, track;
        id = (typeof id === "string" ? id : null);
        loop_ = (loop_ === true ? true : false);
        if (id === null || this._tracks[id] === void 0) {
          throw new Error("Unknown Track ID, add the Track before playing it.");
        }
        pId = void 0;
        track = void 0;
        for (pId in this._pool) {
          track = this._pool[pId];
          if (track.id === id && track.isReady() === true) {
            track.play(loop_);
            return true;
          }
        }
        if (this._poolSize < this._maxPoolSize) {
          pId = ++this._poolSize;
          this._pool[pId] = this._tracks[id].clone();
          this._pool[pId].play(loop_);
          return true;
        }
        for (pId in this._pool) {
          track = this._pool[pId];
          if (this._poolSize === this._maxPoolSize && track.isReady() === true) {
            this._pool[pId] = this._tracks[id].clone();
            this._pool[pId].play(loop_);
            return true;
          }
        }
        return false;
      };

      Jukebox.prototype.toggle = function(id, loop_) {
        id = (typeof id === "string" ? id : null);
        loop_ = (loop_ === true ? true : false);
        if (id !== null) {
          if (this.isPlaying(id) === true) {
            return this.stop(id);
          } else {
            return this.play(id, loop_);
          }
        }
        return false;
      };

      Jukebox.prototype.stop = function(id) {
        var found, pId, track;
        id = (typeof id === "string" ? id : null);
        found = false;
        for (pId in this._pool) {
          track = this._pool[pId];
          if (id === null || track.id === id) {
            found = true;
            track.stop();
          }
        }
        return found;
      };

      Jukebox.prototype.mute = function(id) {
        var found, pId, track;
        id = (typeof id === "string" ? id : null);
        found = false;
        for (pId in this._pool) {
          track = this._pool[pId];
          if (id === null || track.id === id) {
            found = true;
            track.mute();
          }
        }
        return found;
      };

      Jukebox.prototype.unmute = function(id) {
        var found, pId, track;
        id = (typeof id === "string" ? id : null);
        found = false;
        for (pId in this._pool) {
          track = this._pool[pId];
          if (id === null || track.id === id) {
            found = true;
            track.unmute();
          }
        }
        return found;
      };

      Jukebox.prototype.isMuted = function(id) {
        var found, pId, track;
        id = (typeof id === "string" ? id : null);
        found = false;
        for (pId in this._pool) {
          track = this._pool[pId];
          if ((id === null || track.id === id) && track.isMuted() === true) {
            found = true;
            break;
          }
        }
        return found;
      };

      Jukebox.prototype.isPlaying = function(id) {
        var found, pId, track;
        id = (typeof id === "string" ? id : null);
        found = false;
        for (pId in this._pool) {
          track = this._pool[pId];
          if ((id === null || track.id === id) && track.isIdle() === false) {
            found = true;
            break;
          }
        }
        return found;
      };

      Jukebox.prototype.getVolume = function(id) {
        var pId, track, volume;
        id = (typeof id === "string" ? id : null);
        volume = 0;
        if (id !== null) {
          for (pId in this._pool) {
            track = this._pool[pId];
            if (track.id === id) {
              volume = Math.max(volume, track.getVolume());
            }
          }
        }
        return volume;
      };

      Jukebox.prototype.setVolume = function(id, volume) {
        var found, pId, track;
        id = (typeof id === "string" ? id : null);
        volume = (typeof volume === "number" ? volume : null);
        if (volume > 1 || volume < 0) {
          return false;
        }
        found = false;
        for (pId in this._pool) {
          track = this._pool[pId];
          if (id === null || track.id === id) {
            track.setVolume(volume);
            found = true;
          }
        }
        return found;
      };

      return Jukebox;

    })();
  });

}).call(this);
